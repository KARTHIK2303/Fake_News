# -*- coding: utf-8 -*-
"""Fake_News.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_NnCcnjrWkk4kO1lfZyN7tZyvSpsOLse
"""

import pandas as pd
import numpy as np
import re
import pickle
import nltk
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from nltk.stem import WordNetLemmatizer
from sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.linear_model import PassiveAggressiveClassifier

nltk.download('stopwords')

df=pd.read_csv("/content/train.csv")

df.head(5)

df.describe()

df.info()

df.isnull().sum()

df=df.dropna()

df.isnull().sum()

df.columns

df=df.drop(['id','title','author'],axis=1)

df.head(10)

"""We removed the null values from the dataset so the index is effected.
reset the index of the dataset
"""

#reset the index
df.reset_index(inplace=True)
df.head(10)

"""now the index numbers are continousin the dataset."""

ps = PorterStemmer()

def stemming(content):
  con=re.sub('[^a-zA-z]',' ',content)
  con=con.lower()
  con=con.split()
  con=[ps.stem(word) for word in con if not word in stopwords.words('english')]
  con=' '.join(con)
  return con

df['text']=df['text'].apply(stemming)

df.to_csv('Stem_df')

"""## **Defining the Feature and the Target**"""

# Seperating the dependent and independent features
X= df['text']
y= df['label']

#checking the size or shape of the features
print(X.shape),print(y.shape)

"""## **Spliting the dataset into training and testing data**"""

#train test split
X_train,X_test,y_train,y_test = train_test_split(X,y, test_size=0.2)

print(X_train.shape, y_train.shape, X_test.shape, y_test.shape)

"""##**Creating the TF-IDF Model**"""

cv=TfidfVectorizer(max_features=5000,ngram_range=(1,3))

X_train =cv.fit_transform(X_train)

X_test =cv.transform(X_test)

print(X_train.shape, X_test.shape)

"""##**Building Various Models**

###**1.Random Forest Classifier**
"""

from sklearn.tree import DecisionTreeClassifier

decision = DecisionTreeClassifier()
decision.fit(X_train,y_train)
prediction=decision.predict(X_test)

prediction

from sklearn import metrics
score=metrics.accuracy_score(y_test,prediction)



"""##**2.MultinominalNB**"""

multi=MultinomialNB()
multi.fit(X_train,y_train)
pred_multi = multi.predict(X_test)

score_multi = metrics.accuracy_score(y_test,pred_multi)
print(score_multi)

cm_multi = metrics.confusion_matrix(y_test,pred_multi)
cm_multi

#plot_confusion_matrix(cm_multi.classes=['Fake','Real'])

"""##**3.Passive Aggressive Classifier Algorithm**"""

pac=PassiveAggressiveClassifier()
pac.fit(X_train,y_train)
pred_pac= pac.predict(X_test)

score_pac = metrics.accuracy_score(y_test,pred_multi)
print(score_pac)

cm_pac = metrics.confusion_matrix(y_test,pred_pac)
cm_pac

#plot_confusion_matrix(cm_pac.classes=['Fake','Real'])

"""##**saving the best model**"""

pickle.dump(cv, open('vector.pkl', 'wb'))
pickle.dump(decision, open('decision_model.pkl', 'wb'))
pickle.dump(multi, open('multi_model.pkl', 'wb'))
pickle.dump(pac, open('pac_model.pkl', 'wb'))

"""##**Loading the pickle model**"""

vector_form=pickle.load(open('vector.pkl', 'rb'))
load_model = pickle.load(open('multi_model.pkl', 'rb'))

vector_form

def fake_news(news):
  news=stemming(news)
  input_data=[news]

  # Load the vectorizer and model
  vector_form=pickle.load(open('vector.pkl', 'rb'))
  load_model = pickle.load(open('multi_model.pkl', 'rb'))

  # Vectorize the input data using the loaded vectorizer
  vector_form1=vector_form.transform(input_data)

  # Make the prediction using the loaded model
  prediction = load_model.predict(vector_form1)
  
  return prediction

val=fake_news("""In these trying times, Jackie Mason is the Voice of Reason. [In this weekâ€™s exclusive clip for Breitbart News, Jackie discusses the looming threat of North Korea, and explains how President Donald Trump could win the support of the Hollywood left if the U. S. needs to strike first.  â€œIf he decides to bomb them, the whole country will be behind him, because everybody will realize he had no choice and that was the only thing to do,â€ Jackie says. â€œExcept the Hollywood left. Theyâ€™ll get nauseous. â€ â€œ[Trump] could win the left over, theyâ€™ll fall in love with him in a minute. If he bombed them for a better reason,â€ Jackie explains. â€œLike if they have no transgender toilets. â€ Jackie also says itâ€™s no surprise that Hollywood celebrities didnâ€™t support Trumpâ€™s strike on a Syrian airfield this month. â€œThey were infuriated,â€ he says. â€œBecause it might only save lives. That doesnâ€™t mean anything to them. If it only saved the environment, or climate change! Theyâ€™d be the happiest people in the world. â€ Still, Jackie says heâ€™s got nothing against Hollywood celebs. Theyâ€™ve got a tough life in this country. Watch Jackieâ€™s latest clip above.   Follow Daniel Nussbaum on Twitter: @dznussbaum""")

print(val)

if val==[0]:
    print('reliable')
else:
    print('unreliable')